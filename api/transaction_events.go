// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"

	internal "github.com/flagright/flagright-go/api/internal"
)

type TransactionEventMonitoringResult struct {
	EventId          string                        `json:"eventId" url:"eventId"`
	Transaction      *Transaction                  `json:"transaction,omitempty" url:"transaction,omitempty"`
	RiskScoreDetails *TransactionRiskScoringResult `json:"riskScoreDetails,omitempty" url:"riskScoreDetails,omitempty"`
	// Unique transaction identifier
	ExecutedRules []*ExecutedRulesResult `json:"executedRules,omitempty" url:"executedRules,omitempty"`
	// Unique transaction identifier
	HitRules []*HitRulesDetails `json:"hitRules,omitempty" url:"hitRules,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransactionEventMonitoringResult) GetEventId() string {
	if t == nil {
		return ""
	}
	return t.EventId
}

func (t *TransactionEventMonitoringResult) GetTransaction() *Transaction {
	if t == nil {
		return nil
	}
	return t.Transaction
}

func (t *TransactionEventMonitoringResult) GetRiskScoreDetails() *TransactionRiskScoringResult {
	if t == nil {
		return nil
	}
	return t.RiskScoreDetails
}

func (t *TransactionEventMonitoringResult) GetExecutedRules() []*ExecutedRulesResult {
	if t == nil {
		return nil
	}
	return t.ExecutedRules
}

func (t *TransactionEventMonitoringResult) GetHitRules() []*HitRulesDetails {
	if t == nil {
		return nil
	}
	return t.HitRules
}

func (t *TransactionEventMonitoringResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransactionEventMonitoringResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TransactionEventMonitoringResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransactionEventMonitoringResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransactionEventMonitoringResult) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TransactionEventWithRulesResult struct {
	TransactionState TransactionState `json:"transactionState" url:"transactionState"`
	// Timestamp of the event
	Timestamp float64 `json:"timestamp" url:"timestamp"`
	// Transaction ID the event pertains to
	TransactionId string `json:"transactionId" url:"transactionId"`
	// Unique event ID
	EventId *string `json:"eventId,omitempty" url:"eventId,omitempty"`
	// Reason for the event or a state change
	Reason *string `json:"reason,omitempty" url:"reason,omitempty"`
	// Event description
	EventDescription             *string                       `json:"eventDescription,omitempty" url:"eventDescription,omitempty"`
	UpdatedTransactionAttributes *TransactionUpdatable         `json:"updatedTransactionAttributes,omitempty" url:"updatedTransactionAttributes,omitempty"`
	MetaData                     *DeviceData                   `json:"metaData,omitempty" url:"metaData,omitempty"`
	ExecutedRules                []*ExecutedRulesResult        `json:"executedRules,omitempty" url:"executedRules,omitempty"`
	HitRules                     []*HitRulesDetails            `json:"hitRules,omitempty" url:"hitRules,omitempty"`
	Status                       *RuleAction                   `json:"status,omitempty" url:"status,omitempty"`
	RiskScoreDetails             *TransactionRiskScoringResult `json:"riskScoreDetails,omitempty" url:"riskScoreDetails,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransactionEventWithRulesResult) GetTransactionState() TransactionState {
	if t == nil {
		return ""
	}
	return t.TransactionState
}

func (t *TransactionEventWithRulesResult) GetTimestamp() float64 {
	if t == nil {
		return 0
	}
	return t.Timestamp
}

func (t *TransactionEventWithRulesResult) GetTransactionId() string {
	if t == nil {
		return ""
	}
	return t.TransactionId
}

func (t *TransactionEventWithRulesResult) GetEventId() *string {
	if t == nil {
		return nil
	}
	return t.EventId
}

func (t *TransactionEventWithRulesResult) GetReason() *string {
	if t == nil {
		return nil
	}
	return t.Reason
}

func (t *TransactionEventWithRulesResult) GetEventDescription() *string {
	if t == nil {
		return nil
	}
	return t.EventDescription
}

func (t *TransactionEventWithRulesResult) GetUpdatedTransactionAttributes() *TransactionUpdatable {
	if t == nil {
		return nil
	}
	return t.UpdatedTransactionAttributes
}

func (t *TransactionEventWithRulesResult) GetMetaData() *DeviceData {
	if t == nil {
		return nil
	}
	return t.MetaData
}

func (t *TransactionEventWithRulesResult) GetExecutedRules() []*ExecutedRulesResult {
	if t == nil {
		return nil
	}
	return t.ExecutedRules
}

func (t *TransactionEventWithRulesResult) GetHitRules() []*HitRulesDetails {
	if t == nil {
		return nil
	}
	return t.HitRules
}

func (t *TransactionEventWithRulesResult) GetStatus() *RuleAction {
	if t == nil {
		return nil
	}
	return t.Status
}

func (t *TransactionEventWithRulesResult) GetRiskScoreDetails() *TransactionRiskScoringResult {
	if t == nil {
		return nil
	}
	return t.RiskScoreDetails
}

func (t *TransactionEventWithRulesResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransactionEventWithRulesResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TransactionEventWithRulesResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransactionEventWithRulesResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransactionEventWithRulesResult) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}
