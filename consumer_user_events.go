// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/flagright/flagright-go/internal"
)

type ConsumerUserEventsCreateRequest struct {
	// Boolean string whether Flagright should allow a Consumer user event to be applied to a Business user with the same user ID. This will converts a Business user to a Consumer user.
	AllowUserTypeConversion *BooleanString `json:"-" url:"allowUserTypeConversion,omitempty"`
	// Boolean string whether Flagright should lock the KYC risk level for the user.
	LockKycRiskLevel *BooleanString `json:"-" url:"lockKycRiskLevel,omitempty"`
	// Boolean string whether Flagright should lock the CRA risk level for the user.
	LockCraRiskLevel *BooleanString     `json:"-" url:"lockCraRiskLevel,omitempty"`
	Body             *ConsumerUserEvent `json:"-" url:"-"`
}

func (c *ConsumerUserEventsCreateRequest) UnmarshalJSON(data []byte) error {
	body := new(ConsumerUserEvent)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	c.Body = body
	return nil
}

func (c *ConsumerUserEventsCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(c.Body)
}

type ConsumerUserEventWithRulesResult struct {
	// Timestamp of the event
	Timestamp float64 `json:"timestamp" url:"timestamp"`
	// Transaction ID the event pertains to
	UserId string `json:"userId" url:"userId"`
	// Unique event ID
	EventId *string `json:"eventId,omitempty" url:"eventId,omitempty"`
	// Reason for the event or a state change
	Reason *string `json:"reason,omitempty" url:"reason,omitempty"`
	// Event description
	EventDescription              *string                `json:"eventDescription,omitempty" url:"eventDescription,omitempty"`
	UpdatedConsumerUserAttributes *UserOptional          `json:"updatedConsumerUserAttributes,omitempty" url:"updatedConsumerUserAttributes,omitempty"`
	UpdateCount                   *float64               `json:"updateCount,omitempty" url:"updateCount,omitempty"`
	ExecutedRules                 []*ExecutedRulesResult `json:"executedRules,omitempty" url:"executedRules,omitempty"`
	HitRules                      []*HitRulesDetails     `json:"hitRules,omitempty" url:"hitRules,omitempty"`
	RiskScoreDetails              *UserRiskScoreDetails  `json:"riskScoreDetails,omitempty" url:"riskScoreDetails,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConsumerUserEventWithRulesResult) GetTimestamp() float64 {
	if c == nil {
		return 0
	}
	return c.Timestamp
}

func (c *ConsumerUserEventWithRulesResult) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ConsumerUserEventWithRulesResult) GetEventId() *string {
	if c == nil {
		return nil
	}
	return c.EventId
}

func (c *ConsumerUserEventWithRulesResult) GetReason() *string {
	if c == nil {
		return nil
	}
	return c.Reason
}

func (c *ConsumerUserEventWithRulesResult) GetEventDescription() *string {
	if c == nil {
		return nil
	}
	return c.EventDescription
}

func (c *ConsumerUserEventWithRulesResult) GetUpdatedConsumerUserAttributes() *UserOptional {
	if c == nil {
		return nil
	}
	return c.UpdatedConsumerUserAttributes
}

func (c *ConsumerUserEventWithRulesResult) GetUpdateCount() *float64 {
	if c == nil {
		return nil
	}
	return c.UpdateCount
}

func (c *ConsumerUserEventWithRulesResult) GetExecutedRules() []*ExecutedRulesResult {
	if c == nil {
		return nil
	}
	return c.ExecutedRules
}

func (c *ConsumerUserEventWithRulesResult) GetHitRules() []*HitRulesDetails {
	if c == nil {
		return nil
	}
	return c.HitRules
}

func (c *ConsumerUserEventWithRulesResult) GetRiskScoreDetails() *UserRiskScoreDetails {
	if c == nil {
		return nil
	}
	return c.RiskScoreDetails
}

func (c *ConsumerUserEventWithRulesResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConsumerUserEventWithRulesResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ConsumerUserEventWithRulesResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConsumerUserEventWithRulesResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConsumerUserEventWithRulesResult) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}
